/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [8-1:0] M_boolean_boole;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn;
  boolean_2 boolean (
    .clk(clk),
    .rst(rst),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn(M_boolean_alufn),
    .boole(M_boolean_boole)
  );
  wire [8-1:0] M_sm_a;
  wire [8-1:0] M_sm_b;
  wire [1-1:0] M_sm_z;
  wire [1-1:0] M_sm_v;
  wire [1-1:0] M_sm_n;
  wire [5-1:0] M_sm_shiftb;
  wire [1-1:0] M_sm_out;
  wire [6-1:0] M_sm_alufn;
  wire [8-1:0] M_sm_ans;
  reg [8-1:0] M_sm_boole;
  reg [8-1:0] M_sm_s;
  reg [8-1:0] M_sm_sum;
  reg [1-1:0] M_sm_checker;
  reg [5-1:0] M_sm_io_button;
  statemachine_3 sm (
    .clk(clk),
    .rst(rst),
    .boole(M_sm_boole),
    .s(M_sm_s),
    .sum(M_sm_sum),
    .checker(M_sm_checker),
    .io_button(M_sm_io_button),
    .a(M_sm_a),
    .b(M_sm_b),
    .z(M_sm_z),
    .v(M_sm_v),
    .n(M_sm_n),
    .shiftb(M_sm_shiftb),
    .out(M_sm_out),
    .alufn(M_sm_alufn),
    .ans(M_sm_ans)
  );
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  wire [8-1:0] M_adder_s;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder_4 adder (
    .clk(clk),
    .rst(rst),
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n),
    .s(M_adder_s)
  );
  wire [8-1:0] M_shifter_sum;
  reg [8-1:0] M_shifter_a;
  reg [5-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn;
  shifter_5 shifter (
    .clk(clk),
    .rst(rst),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn(M_shifter_alufn),
    .sum(M_shifter_sum)
  );
  wire [1-1:0] M_comparator_out;
  reg [1-1:0] M_comparator_z;
  reg [1-1:0] M_comparator_v;
  reg [1-1:0] M_comparator_n;
  reg [6-1:0] M_comparator_alufn;
  comparator_6 comparator (
    .clk(clk),
    .rst(rst),
    .z(M_comparator_z),
    .v(M_comparator_v),
    .n(M_comparator_n),
    .alufn(M_comparator_alufn),
    .out(M_comparator_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    M_boolean_a = M_sm_a;
    M_boolean_b = M_sm_b;
    M_shifter_a = M_sm_a;
    M_shifter_b = M_sm_shiftb;
    M_adder_a = M_sm_a;
    M_adder_b = M_sm_b;
    M_comparator_v = M_sm_v;
    M_comparator_z = M_sm_z;
    M_comparator_n = M_sm_n;
    M_boolean_alufn = M_sm_alufn;
    M_adder_alufn = M_sm_alufn;
    M_comparator_alufn = M_sm_alufn;
    M_shifter_alufn = M_sm_alufn;
    M_sm_boole = M_boolean_boole;
    M_sm_s = M_adder_s;
    M_sm_checker = M_comparator_out;
    M_sm_sum = M_shifter_sum;
    io_led[0+7-:8] = M_sm_a;
    io_led[8+7-:8] = M_sm_b;
    io_led[16+7-:8] = M_sm_ans;
    led[0+5-:6] = M_sm_alufn;
    led[7+0-:1] = M_sm_out;
    M_sm_io_button = io_button;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
  end
endmodule
