module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    boolean boolean;
    statemachine sm;
    adder adder;
    shifter shifter;
    comparator comparator;
  
      }
  }
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = 8h00;
    
    boolean.a = sm.a;
    boolean.b = sm.b;
    shifter.a = sm.a;
    shifter.b = sm.shiftb;
    adder.a = sm.a;
    adder.b = sm.b;
    comparator.v = sm.v;
    comparator.z = sm.z;
    comparator.n = sm.n;
    
    boolean.alufn = sm.alufn;
    adder.alufn = sm.alufn;
    comparator.alufn = sm.alufn;
    shifter.alufn = sm.alufn;
    
    sm.boole = boolean.boole;
    sm.s = adder.s;
    sm.checker = comparator.out;
    sm.sum = shifter.sum;
        
    io_led[0] = sm.a;
    io_led[1] = sm.b;
    io_led[2] = sm.ans;
    led[5:0] = sm.alufn;
    led[7] = sm.out;
    sm.io_button = io_button;
    
    spi_miso = bz;          // not using SPI   
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    

    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    
    
  }
}