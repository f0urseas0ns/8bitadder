
module testComparator (
    input clk,  // clock
    input rst,  // reset
    
    input checker, //for checking comparator output
    
    output z[8],
    output v[8],
    output n[8],
    
    output alufn[6],

    
    output rest //idle time
    
  ) {
  
.clk(clk){
  .rst(rst){
    fsm state = {CMPEQ, CMPEQF, CMPLT, CMPLTF, CMPLE, CMPLEF, IDLE}; //respective states
    }
    dff count[27]; //to keep track of time
      }
    
  
  always {
    
    rest = 0;
    count.d = count.q+1;
    
    alufn = 6b00;
    z = 8h00;
    v = 8h00;
    n = 8h00;
    
    case(state.q){
    
      state.CMPEQ: 
        alufn = 6b110011;
        z = 8b00; //z = 0 for true
        
        if (count.q[26] == 1){
          if (checker == 8b00){ //if output is correct, will move to next state
            state.d = state.CMPEQF;         
            }
          }
        
      state.CMPEQF: //false case for equal than 
        alufn = 6b110011;
        z = 8b01; //z = 1
        
        if(count.q[26] == 0){
          if (checker == 8b01){ //z will output 1
            state.d = state.CMPLT;
            }
          }
        
      state.CMPLT: //check if a < b true
        alufn = 6b110101;
        v = 8b01;
        n = 8b00;
        
        if (count.q[26] == 1){
          if (checker == 8b01){
            state.d = state.CMPLTF;
          }
        }
      
        
      state.CMPLTF: //check if a < b false
        alufn = 6b110101;
        
        v = 8b01;
        n = 8b01;
        
        if (count.q[26] == 0){
          if (checker == 8b00){
            state.d = state.CMPLE;
          } 
        }
           
      state.CMPLE: //check if a <= b true
        alufn = 6b110111;
        z = 8b01;
        v = 8b01;
        n = 8b01;
        //n xor v will get 0, 0 or z = 1 will output 1
        
        if (count.q[26] == 1){
          if (checker == 8b01){
            state.d = state.CMPLEF;
          }  
        }     
        
      state.CMPLEF: //check if a < b false
        alufn = 6b110111;
        z = 8b00;
        v = 8b01;
        n = 8b01;
        
        if (count.q[26] == 0){
          if (checker == 8b00){
            state.d = state.IDLE; //go back to idle state
          }
  
        }     
        
      state.IDLE: //idle state, wait for next command
        rest = 1;
 
    }
  }
 }